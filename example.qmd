---
title: "example"
format: live-html
engine: knitr
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{webr}
#| setup: true
#| exercise: ex_gold1
#| envir: gold1
#| persist: true

library(dplyr)
library(ggplot2)

# Create a vector of silly names
names <- c(
  "Brainy McThinkface", "Sigmund Doodle", "Freudian Slip", "Carl Pong", "B.F. Skittles",
  "Jean Piaget-tro", "Ivan Pavdog", "Wilhelm Wundt-erful", "Stanley Milkshake", "Philip Zimbar-dough"
)

# Repeat the names to match the number of rows (10)
names <- rep(names, length.out = 10)

# Add the names to the existing data frame
goldsmiths_students <- data.frame(
  name = names,
  study_hours = rnorm(10, mean = 20, sd = 5),
  exam_score = rnorm(10, mean = 30, sd = 5)
)

# Add some correlation
goldsmiths_students$exam_score <- goldsmiths_students$exam_score + 2 * goldsmiths_students$study_hours + rnorm(5, sd = 2)


head(goldsmiths_students)
```

Push the `run code` button to see the first few participants in our
study's dataset

```{webr}
#| exercise: ex_gold1
#| envir: gold1
#| edit: false
#| persist: true
#| caption: Our Data
#| startover: false
head(goldsmiths_students)
```

try to remember the instruction you need to `cor`relate two datapoints
across the sample

```{webr}
#| exercise: ex_gold2
#| envir: gold1

# Calculate the correlation between study hours and exam scores
correlation <- goldsmiths_students |> 
  summarise(cor = ______(study_hours, exam_score)) |> 
  pull(cor)


# Create a scatter plot
ggplot(goldsmiths_students, aes(x = study_hours, y = exam_score)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Relationship between Study Hours and Exam Scores",
       subtitle = paste("Correlation:", round(correlation, 2)),
       x = "Study Hours",
       y = "Exam Score")

# Interpret the correlation
if (correlation > 0.7) {
  print("There is a strong positive correlation between study hours and exam scores.")
} else if (correlation > 0.3) {
  print("There is a moderate positive correlation between study hours and exam scores.")
} else if (correlation > 0) {
  print("There is a weak positive correlation between study hours and exam scores.")
} else {
  print("There is no positive correlation between study hours and exam scores.")
}

head(goldsmiths_students)
```

::: {.hint exercise="ex_gold2"}
::: {.callout-note collapse="false"}
## Hint 1

Use the `cor()` function to calculate the correlation between two
variables.

``` r
correlation <- goldsmiths_students |> 
  summarise(cor = cor(______, ______))
```
:::
:::

::: {.hint exercise="ex_gold2"}
::: {.callout-note collapse="false"}
## Hint 2

The `cor()` function takes two arguments: the variables you want to
correlate.

``` r
correlation <- goldsmiths_students |> 
  summarise(cor = cor(study_hours, exam_score))
```
:::
:::

::: {.solution exercise="ex_gold2"}
::: {.callout-tip collapse="false"}
## Fully worked solution:

Calculate the correlation between study hours and exam scores:

``` r
# Calculate the correlation
correlation <- goldsmiths_students |> 
  summarise(cor = cor(study_hours, exam_score)) |> 
  pull(cor)

# Create a scatter plot
ggplot(goldsmiths_students, aes(x = study_hours, y = exam_score)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Relationship between Study Hours and Exam Scores",
       subtitle = paste("Correlation:", round(correlation, 2)),
       x = "Study Hours",
       y = "Exam Score")

# Interpret the correlation
if (correlation > 0.7) {
  print("There is a strong positive correlation between study hours and exam scores.")
} else if (correlation > 0.3) {
  print("There is a moderate positive correlation between study hours and exam scores.")
} else if (correlation > 0) {
  print("There is a weak positive correlation between study hours and exam scores.")
} else {
  print("There is no positive correlation between study hours and exam scores.")
}
```

This solution calculates the correlation, creates a visualization, and
provides an interpretation of the results.
:::
:::

Here is another idea

Calculate the average of all of the integers from 1 to 10.

```{webr}
#| exercise: ex_1_r
______(1:10)
```

```{webr}
#| exercise: ex_1_r
#| check: true
if (identical(.result, mean(1:10))) {
  list(correct = TRUE, message = "Nice work!")
} else {
  list(correct = FALSE, message = "That's incorrect, sorry.")
}
```

Feedback to a specific error made by students

```{webr}
#| exercise: example_3
123 + "456"
```

```{webr}
#| exercise: example_3
#| check: true
errors <- Filter(\(x) inherits(x, "error"), .evaluate_result)
this_error <- Filter(\(x) x$message == "non-numeric argument to binary operator", errors)
if (length(this_error) > 0) {
  list(
    correct = FALSE,
    type = "info",
    message = "Be careful! In R wrapping a set of numbers in quotes turns it into a string! You can't add numbers and letters!"
  )
}
```

Gradethis

```{webr}
#| exercise: ex_grade
#| setup: true
library(dplyr)
```

Write code that would show us all the `distinct` hair colours of
characters in the galaxy!

```{webr}
#| caption: Sample Exercise
#| exercise: ex_grade
starwars |> ______
```

::: {.solution exercise="ex_grade"}
#### Solution

Use the `distinct()` function from the `{dplyr}` package.

```{webr}
#| exercise: ex_grade
#| solution: true
starwars |> distinct(hair_color)
```
:::

```{webr}
#| exercise: ex_grade
#| check: true
gradethis::grade_this_code()
```

## Reactivity with OJS

```{webr}
#| input:
#|   - n
hist(rnorm(1000), breaks = n, col = "pink")
```

```{ojs}
//| echo: false
viewof n = Inputs.range([1, 40], {step: 1, label: "n"})
```

```{webr}
#| edit: false
#| output: false
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(palmerpenguins)
penguins_clean <- penguins |> drop_na()
```

Choose a species of penguin, we'll work with that species for the rest
of the tutorial.

```{ojs}
//| echo: false
viewof input_species = Inputs.select(["Adelie", "Chinstrap", "Gentoo"])
penguin_info = {
  const description = {
    Adelie: md`The **Adelie** is the most widespread penguin species, and, along with the emperor penguin, is the most southerly distributed of all penguins.`,
    Chinstrap: md`The **chinstrap** penguin's name stems from the narrow black band under its head, which makes it appear as if it were wearing a black helmet, making it easy to identify.`,
    Gentoo: md`The **gentoo** penguin calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.`,
  }
  return description[input_species]
}
```

```{webr}
#| edit: false
#| echo: false
#| input:
#|  - input_species
penguins_alpha <- penguins |>
  drop_na() |>
  mutate(alpha = ifelse(species == input_species, 0.8, 0.2))

p <- ggplot(data = penguins_alpha, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(
    aes(color = species, shape = species, alpha = alpha),
    size = 3
  ) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  scale_alpha(guide = 'none') +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species",
       alpha = "Penguin species")

ggplotly(p)
```

### Data manipulation with `dplyr`

Filter your dataset so that it only contains the species of penguin you
selected above, <strong>\${input_species}</strong>.

::: panel-tabset
## Exercise

```{webr}
#| exercise: ex2
#| caption: Exercise 2
#| input:
#|  - input_species
penguins_clean |> ______
```

```{webr}
#| exercise: ex2
#| check: true

answer <- penguins_clean |> filter(species == input_species)
if (identical(.result, answer)) {
  list(correct = TRUE, message = "Correct!")
} else {
  list(correct = FALSE, message = "Incorrect.")
}
```

## Hints

::: {.hint exercise="ex2"}
Filter datasets using dplyr's `filter()` function

``` r
penguins_clean |> filter(______)
```
:::

::: {.hint exercise="ex2"}
Specify the column to filter over as the argument to the `filter()`
function. Here we're using "non-standard evaluation".

``` r
penguins_clean |> filter(species == ______)
```
:::

## Solution

::: {.solution exercise="ex2"}
**Solution:**

A full solution filtering for the \${input_species} species is shown
below

```{webr}
#| exercise: ex2
#| solution: true
penguins_clean |> filter(species == "${input_species}")
```
:::
:::

``` r
penguins_clean |> filter(______)
```

:::

::: {.hint exercise="ex2"}
Specify the column to filter over as the argument to the `filter()`
function. Here we're using "non-standard evaluation".

``` r
penguins_clean |> filter(species == ______)
```
:::

## Solution

::: {.solution exercise="ex2"}
**Solution:**

A full solution filtering for the \${input_species} species is shown
below

```{webr}
#| exercise: ex2
#| solution: true
penguins_clean |> filter(species == "${input_species}")
```
:::

:::

## Example: Tangle

This is an example of an exercise with reactive inputs taken from an
existing Observable notebook, in this case a "Tangle" input.

<details>

<summary>Source</summary>

```` {.markdown filename="tangle.qmd"}
### The Normal Distribution

The normal distribution has 2 parameters, the mean $\mu$ and the standard deviation $\sigma$.
For a normal distribution with mean $\mu =$
`{{ojs}} meanTgl` and $\sigma =$ `{{ojs}} sdTgl`, here is a plot of the probability density:

```{{ojs}}
//| echo: false
import {Tangle} from "@mbostock/tangle"

// Setup Tangle reactive inputs
viewof mean = Inputs.input(0);
viewof sd = Inputs.input(1);
meanTgl = Inputs.bind(Tangle({min: -5, max: 5, minWidth: "1em", step: 0.1}), viewof mean);
sdTgl = Inputs.bind(Tangle({min: 0, minWidth: "1em", step: 0.01}), viewof sd);

// draw plot in R
draw_plot(mean, sd)
```

```{webr}
#| edit: false
#| output: false
#| define:
#|   - draw_plot
draw_plot <- function(mean, sd) {
  x <- seq(-5, 5, length = 100)
  y <- dnorm(x, mean = mean, sd = sd)
  plot(x, y, type = "l", lwd = 2, ylim = c(0,1))
}
```

Recreate the plot above in base R graphics.

```{{webr}}
#| exercise: tangle
#| input:
#|  - mean
#|  - sd
#| caption: Plot Normal Distribution
x <- seq(-5, 5, length = 100)
y <- ______
______
```

::: {.solution exercise="tangle"}
**Solution**:

```{{webr}}
#| exercise: tangle
#| solution: true
x <- seq(-5, 5, length = 100)                                 # <1>
y <- dnorm(x, mean = ${mean}, sd = ${sd})                     # <2>
plot(x, y, type = "l", lwd = 2, ylim = c(0,1))                # <3>
```
1. Generate values for the x axis.
2. Generate values for the y axis using the normal distribution density function `dnorm()`, with mean ${mean} and standard deviation ${sd}.
3. Plot the values as a line (`type = "l"`) and with thicker width (`lwd = 2`).
:::
````

</details>

### The Normal Distribution

The normal distribution has 2 parameters, the mean $\mu$ and the
standard deviation $\sigma$. For a normal distribution with mean $\mu =$
`{ojs} meanTgl` and $\sigma =$ `{ojs} sdTgl`, here is a plot of the
probability density:

```{ojs}
//| echo: false
import {Tangle} from "@mbostock/tangle"

// Setup Tangle reactive inputs
viewof mean = Inputs.input(0);
viewof sd = Inputs.input(1);
meanTgl = Inputs.bind(Tangle({min: -5, max: 5, minWidth: "1em", step: 0.1}), viewof mean);
sdTgl = Inputs.bind(Tangle({min: 0, minWidth: "1em", step: 0.01}), viewof sd);

// draw plot in R
draw_plot(mean, sd)
```

```{webr}
#| edit: false
#| output: false
#| define:
#|   - draw_plot
draw_plot <- function(mean, sd) {
  x <- seq(-5, 5, length = 100)
  y <- dnorm(x, mean = mean, sd = sd)
  plot(x, y, type = "l", lwd = 2, ylim = c(0,1))
}
```

Recreate the plot above in base R graphics.

```{webr}
#| exercise: tangle
#| caption: Plot Normal Distribution
x <- seq(-5, 5, length = 100)
y <- ______
______
```

::: {.solution exercise="tangle"}
**Solution**:

```{webr}
#| exercise: tangle
#| solution: true
x <- seq(-5, 5, length = 100)                                 # <1>
y <- dnorm(x, mean = ${mean}, sd = ${sd})                     # <2>
plot(x, y, type = "l", lwd = 2, ylim = c(0,1))                # <3>
```

1.  Generate values for the x axis.
2.  Generate values for the y axis using the normal distribution density
    function `dnorm()`, with mean \${mean.toLocaleString()} and standard
    deviation \${sd.toLocaleString()}.
3.  Plot the values as a line (`type = "l"`) and with thicker width
    (`lwd = 2`).
:::
