[
  {
    "objectID": "dynamic.html",
    "href": "dynamic.html",
    "title": "Dynamic Exercises",
    "section": "",
    "text": "The quarto-live extension’s OJS integration allows an instructor to write dynamic exercises with parameterised questions and solution code. Such questions would provide a different experience for each learner, or the same learner over time, creating long-term value."
  },
  {
    "objectID": "dynamic.html#parameterised-exercises",
    "href": "dynamic.html#parameterised-exercises",
    "title": "Dynamic Exercises",
    "section": "Parameterised Exercises",
    "text": "Parameterised Exercises\nTo create a parameterised exercise, first define some input variables in OJS for each parameter you wish to create. Then, use those parameters throughout your exercise.\n\nExample: Write an R function\nFirst, create a “hidden” randomised varaible using an ojs cell with the cell option echo: false.\n\n\nparam_ex.qmd\n\n```{ojs}\n//| echo: false\nrand_int = Math.floor(Math.random() * 10000);\n```\n\n\nrand_int = Math.floor(Math.random() * 10000);\n\n\n\n\n\n\nNext, write your exercise using the randomised parameter as an input variable.\nYou can use the value of OJS variables in your question text and tempalte solution using string interpolation. For example, in this question the string ${rand_int} becomes .\n\n\nSource\n\n\nparam_ex.qmd\n\nWrite an R function that takes a single variable `x`\nand returns that value multiplied by ${rand_int}.\n\n```{webr}\n#| exercise: ex1\n#| input:\n#|   - rand_int\nmy_function &lt;- function(x) {\n  ______\n}\n```\n\n```{webr}\n#| exercise: ex1\n#| check: true\ntest_value &lt;- rnorm(1)\ncorrect_function &lt;- function(x) { x * rand_int }\nif (!exists(\"my_function\")) {\n  list(correct = FALSE, message = \"I can't see your function!\")\n} else if (identical(my_function(test_value), correct_function(test_value))) {\n  list(correct = TRUE, message = \"Correct!\")\n} else {\n  list(correct = FALSE, message = \"Incorrect.\")\n}\n```\n\n::: { .solution exercise=\"ex1\" }\n**Solution**:\n```r\nmy_function &lt;- function(x) {\n  x * ${rand_int}\n}\n```\n:::\n\n\n\nOutput\nWrite an R function that takes a single variable x and returns that value multiplied by .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\nmy_function &lt;- function(x) {\n  x * ${rand_int}\n}"
  },
  {
    "objectID": "dynamic.html#example-penquins",
    "href": "dynamic.html#example-penquins",
    "title": "Dynamic Exercises",
    "section": "Example: Penquins",
    "text": "Example: Penquins\nThis is an example of a dynamic exercise using input from the learner to change the details in the exercise later.\n\n\nSource\n\n\n\npenguins.qmd\n\n```{webr}\n#| edit: false\n#| output: false\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(tidyr)\nlibrary(palmerpenguins)\npenguins_clean &lt;- penguins |&gt; drop_na()\n```\n\nChoose a species of penguin, we'll work with that species for the rest of the tutorial.\n\n```{ojs}\n//| echo: false\nviewof input_species = Inputs.select([\"Adelie\", \"Chinstrap\", \"Gentoo\"])\npenguin_info = {\n  const description = {\n    Adelie: md`The **Adelie** is the most widespread penguin species, and, along with the emperor penguin, is the most southerly distributed of all penguins.`,\n    Chinstrap: md`The **chinstrap** penguin's name stems from the narrow black band under its head, which makes it appear as if it were wearing a black helmet, making it easy to identify.`,\n    Gentoo: md`The **gentoo** penguin calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.`,\n  }\n  return description[input_species]\n}\n```\n\n```{webr}\n#| edit: false\n#| echo: false\n#| input:\n#|  - input_species\npenguins_alpha &lt;- penguins |&gt;\n  drop_na() |&gt;\n  mutate(alpha = ifelse(species == input_species, 0.8, 0.2))\n\np &lt;- ggplot(data = penguins_alpha, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(\n    aes(color = species, shape = species, alpha = alpha),\n    size = 3\n  ) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  scale_alpha(guide = 'none') +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       subtitle = \"Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\",\n       alpha = \"Penguin species\")\n\nggplotly(p)\n```\n\n### Data manipulation with `dplyr`\n\nFilter your dataset so that it only contains the species of penguin you selected above, &lt;strong&gt;${input_species}&lt;/strong&gt;.\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr}\n#| exercise: ex2\n#| caption: Exercise 2\n#| input:\n#|  - input_species\npenguins_clean |&gt; ______\n```\n\n```{webr}\n#| exercise: ex2\n#| check: true\nanswer &lt;- penguins_clean |&gt; filter(species == input_species)\nif (identical(.result, answer)) {\n  list(correct = TRUE, message = \"Correct!\")\n} else {\n  list(correct = FALSE, message = \"Incorrect.\")\n}\n```\n\n## Hints\n\n::: { .hint exercise=\"ex2\" }\nFilter datasets using dplyr's `filter()` function\n\n```r\npenguins_clean |&gt; filter(______)\n```\n:::\n\n::: { .hint exercise=\"ex2\" }\nSpecify the column to filter over as the argument to the `filter()` function. Here we're using \"non-standard evaluation\".\n\n```r\npenguins_clean |&gt; filter(species == ______)\n```\n:::\n\n## Solution\n\n::: { .solution exercise=\"ex2\" }\n\n**Solution:**\n\nA full solution filtering for the ${input_species} species is shown below\n\n```{webr}\n#| exercise: ex2\n#| solution: true\npenguins_clean |&gt; filter(species == \"${input_species}\")\n```\n\n:::\n:::\n\n\n\nOutput\n\n\n\n\n\n\n\n\nChoose a species of penguin, we’ll work with that species for the rest of the tutorial.\n\nviewof input_species = Inputs.select([\"Adelie\", \"Chinstrap\", \"Gentoo\"])\npenguin_info = {\n  const description = {\n    Adelie: md`The **Adelie** is the most widespread penguin species, and, along with the emperor penguin, is the most southerly distributed of all penguins.`,\n    Chinstrap: md`The **chinstrap** penguin's name stems from the narrow black band under its head, which makes it appear as if it were wearing a black helmet, making it easy to identify.`,\n    Gentoo: md`The **gentoo** penguin calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.`,\n  }\n  return description[input_species]\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData manipulation with dplyr\nFilter your dataset so that it only contains the species of penguin you selected above, .\n\nExerciseHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter datasets using dplyr’s filter() function\npenguins_clean |&gt; filter(______)\n\n\nSpecify the column to filter over as the argument to the filter() function. Here we’re using “non-standard evaluation”.\npenguins_clean |&gt; filter(species == ______)\n\n\n\n\nSolution:\nA full solution filtering for the  species is shown below\n\n\npenguins_clean |&gt; filter(species == \"${input_species}\")\npenguins_clean |&gt; filter(species == \"${input_species}\")"
  },
  {
    "objectID": "dynamic.html#example-tangle",
    "href": "dynamic.html#example-tangle",
    "title": "Dynamic Exercises",
    "section": "Example: Tangle",
    "text": "Example: Tangle\nThis is an example of an exercise with reactive inputs taken from an existing Observable notebook, in this case a “Tangle” input.\n\n\nSource\n\n\n\ntangle.qmd\n\n### The Normal Distribution\n\nThe normal distribution has 2 parameters, the mean $\\mu$ and the standard deviation $\\sigma$.\nFor a normal distribution with mean $\\mu =$\n`{{ojs}} meanTgl` and $\\sigma =$ `{ojs} sdTgl`, here is a plot of the probability density:\n\n```{ojs}\n//| echo: false\nimport {Tangle} from \"@mbostock/tangle\"\n\n// Setup Tangle reactive inputs\nviewof mean = Inputs.input(0);\nviewof sd = Inputs.input(1);\nmeanTgl = Inputs.bind(Tangle({min: -5, max: 5, minWidth: \"1em\", step: 0.1}), viewof mean);\nsdTgl = Inputs.bind(Tangle({min: 0, minWidth: \"1em\", step: 0.01}), viewof sd);\n\n// draw plot in R\ndraw_plot(mean, sd)\n```\n\n::: {.cell edit='false' define='draw_plot'}\n```{webr}\n#| edit: false\n#| output: false\n#| define:\n#|   - draw_plot\ndraw_plot &lt;- function(mean, sd) {\n  x &lt;- seq(-5, 5, length = 100)\n  y &lt;- dnorm(x, mean = mean, sd = sd)\n  plot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))\n}\n```\n:::\n\nRecreate the plot above in base R graphics.\n\n```{webr}\n#| exercise: tangle\n#| input:\n#|  - mean\n#|  - sd\n#| caption: Plot Normal Distribution\nx &lt;- seq(-5, 5, length = 100)\ny &lt;- ______\n______\n```\n\n::: {.solution exercise=\"tangle\"}\n**Solution**:\n\n```{webr}\n#| exercise: tangle\n#| solution: true\nx &lt;- seq(-5, 5, length = 100)                                 # &lt;1&gt;\ny &lt;- dnorm(x, mean = ${mean}, sd = ${sd})                     # &lt;2&gt;\nplot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))                # &lt;3&gt;\n```\n1. Generate values for the x axis.\n2. Generate values for the y axis using the normal distribution density function `dnorm()`, with mean ${mean} and standard deviation ${sd}.\n3. Plot the values as a line (`type = \"l\"`) and with thicker width (`lwd = 2`).\n:::\n\n\n\nThe Normal Distribution\nThe normal distribution has 2 parameters, the mean \\(\\mu\\) and the standard deviation \\(\\sigma\\). For a normal distribution with mean \\(\\mu =\\)  and \\(\\sigma =\\) , here is a plot of the probability density:\n\nimport {Tangle} from \"@mbostock/tangle\"\n\n// Setup Tangle reactive inputs\nviewof mean = Inputs.input(0);\nviewof sd = Inputs.input(1);\nmeanTgl = Inputs.bind(Tangle({min: -5, max: 5, minWidth: \"1em\", step: 0.1}), viewof mean);\nsdTgl = Inputs.bind(Tangle({min: 0, minWidth: \"1em\", step: 0.01}), viewof sd);\n\n// draw plot in R\ndraw_plot(mean, sd)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecreate the plot above in base R graphics.\n\n\n\n\n\n\n\n\n\nSolution:\n\n\nx &lt;- seq(-5, 5, length = 100)                                 # &lt;1&gt;\ny &lt;- dnorm(x, mean = ${mean}, sd = ${sd})                     # &lt;2&gt;\nplot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))                # &lt;3&gt;\n1x &lt;- seq(-5, 5, length = 100)\n2y &lt;- dnorm(x, mean = ${mean}, sd = ${sd})\n3plot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))\n\n\n\n1\n\nGenerate values for the x axis.\n\n2\n\nGenerate values for the y axis using the normal distribution density function dnorm(), with mean  and standard deviation .\n\n3\n\nPlot the values as a line (type = \"l\") and with thicker width (lwd = 2)."
  },
  {
    "objectID": "quarto-live_web.html#read-only",
    "href": "quarto-live_web.html#read-only",
    "title": "Quarto-live_website",
    "section": "Read Only",
    "text": "Read Only"
  },
  {
    "objectID": "quarto-live_web.html#read-only-without-autorun",
    "href": "quarto-live_web.html#read-only-without-autorun",
    "title": "Quarto-live_website",
    "section": "Read Only without autorun",
    "text": "Read Only without autorun"
  },
  {
    "objectID": "quarto-live_web.html#immediate-execution",
    "href": "quarto-live_web.html#immediate-execution",
    "title": "Quarto-live_website",
    "section": "Immediate execution",
    "text": "Immediate execution\nSetting runbutton: false will remove the “Run Code” button from the editor UI. In this mode code is evaluated immediately as it is entered into the editor.\n\nSource"
  },
  {
    "objectID": "quarto-live_web.html#autocomplete",
    "href": "quarto-live_web.html#autocomplete",
    "title": "Quarto-live_website",
    "section": "Autocomplete",
    "text": "Autocomplete\nAutocompletion code suggestions can be enabled with the code cell option completion: true.\n\nSource\nfor example, type rnorm(10, n_mean, n_sd) below also"
  },
  {
    "objectID": "quarto-live_web.html#persistent-storage-in-browser",
    "href": "quarto-live_web.html#persistent-storage-in-browser",
    "title": "Quarto-live_website",
    "section": "Persistent Storage in browser",
    "text": "Persistent Storage in browser"
  },
  {
    "objectID": "quarto-live_web.html#fill-in-the-blank-so-that-the-result-of-the-sum-is-10.",
    "href": "quarto-live_web.html#fill-in-the-blank-so-that-the-result-of-the-sum-is-10.",
    "title": "Quarto-live_website",
    "section": "Fill in the blank so that the result of the sum is 10.",
    "text": "Fill in the blank so that the result of the sum is 10.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter the starwars dataset so that only the droid characters are included.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr.\nstarwars |&gt; filter(______)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column.\nstarwars |&gt; filter(species == ______)\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\")\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Testing Exercise Functionality",
    "section": "",
    "text": "testing exercise functionality"
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "example",
    "section": "",
    "text": "Push the run code button to see the first few participants in our study’s dataset\ntry to remember the instruction you need to correlate two datapoints across the sample\nHere is another idea\nCalculate the average of all of the integers from 1 to 10.\nFeedback to a specific error made by students\nGradethis\nWrite code that would show us all the distinct hair colours of characters in the galaxy!"
  },
  {
    "objectID": "example.html#reactivity-with-ojs",
    "href": "example.html#reactivity-with-ojs",
    "title": "example",
    "section": "Reactivity with OJS",
    "text": "Reactivity with OJS\n\n\n\n\n\n\n\n\n\nviewof n = Inputs.range([1, 40], {step: 1, label: \"n\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose a species of penguin, we’ll work with that species for the rest of the tutorial.\n\nviewof input_species = Inputs.select([\"Adelie\", \"Chinstrap\", \"Gentoo\"])\npenguin_info = {\n  const description = {\n    Adelie: md`The **Adelie** is the most widespread penguin species, and, along with the emperor penguin, is the most southerly distributed of all penguins.`,\n    Chinstrap: md`The **chinstrap** penguin's name stems from the narrow black band under its head, which makes it appear as if it were wearing a black helmet, making it easy to identify.`,\n    Gentoo: md`The **gentoo** penguin calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.`,\n  }\n  return description[input_species]\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData manipulation with dplyr\nFilter your dataset so that it only contains the species of penguin you selected above, .\n\nExerciseHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter datasets using dplyr’s filter() function\npenguins_clean |&gt; filter(______)\n\n\nSpecify the column to filter over as the argument to the filter() function. Here we’re using “non-standard evaluation”.\npenguins_clean |&gt; filter(species == ______)\n\n\n\n\nSolution:\nA full solution filtering for the  species is shown below\n\n\npenguins_clean |&gt; filter(species == \"${input_species}\")\npenguins_clean |&gt; filter(species == \"${input_species}\")\n\n\n\n\n\n\npenguins_clean |&gt; filter(______)\n:::\n\nSpecify the column to filter over as the argument to the filter() function. Here we’re using “non-standard evaluation”.\npenguins_clean |&gt; filter(species == ______)"
  },
  {
    "objectID": "example.html#solution-2",
    "href": "example.html#solution-2",
    "title": "example",
    "section": "Solution",
    "text": "Solution\n\nSolution:\nA full solution filtering for the  species is shown below\n\n\npenguins_clean |&gt; filter(species == \"${input_species}\")\npenguins_clean |&gt; filter(species == \"${input_species}\")\n\n\n\n:::"
  },
  {
    "objectID": "example.html#example-tangle",
    "href": "example.html#example-tangle",
    "title": "example",
    "section": "Example: Tangle",
    "text": "Example: Tangle\nThis is an example of an exercise with reactive inputs taken from an existing Observable notebook, in this case a “Tangle” input.\n\n\nSource\n\n\n\ntangle.qmd\n\n### The Normal Distribution\n\nThe normal distribution has 2 parameters, the mean $\\mu$ and the standard deviation $\\sigma$.\nFor a normal distribution with mean $\\mu =$\n`{{ojs}} meanTgl` and $\\sigma =$ `{ojs} sdTgl`, here is a plot of the probability density:\n\n```{ojs}\n//| echo: false\nimport {Tangle} from \"@mbostock/tangle\"\n\n// Setup Tangle reactive inputs\nviewof mean = Inputs.input(0);\nviewof sd = Inputs.input(1);\nmeanTgl = Inputs.bind(Tangle({min: -5, max: 5, minWidth: \"1em\", step: 0.1}), viewof mean);\nsdTgl = Inputs.bind(Tangle({min: 0, minWidth: \"1em\", step: 0.01}), viewof sd);\n\n// draw plot in R\ndraw_plot(mean, sd)\n```\n\n::: {.cell edit='false' define='draw_plot'}\n```{webr}\n#| edit: false\n#| output: false\n#| define:\n#|   - draw_plot\ndraw_plot &lt;- function(mean, sd) {\n  x &lt;- seq(-5, 5, length = 100)\n  y &lt;- dnorm(x, mean = mean, sd = sd)\n  plot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))\n}\n```\n:::\n\nRecreate the plot above in base R graphics.\n\n```{webr}\n#| exercise: tangle\n#| input:\n#|  - mean\n#|  - sd\n#| caption: Plot Normal Distribution\nx &lt;- seq(-5, 5, length = 100)\ny &lt;- ______\n______\n```\n\n::: {.solution exercise=\"tangle\"}\n**Solution**:\n\n```{webr}\n#| exercise: tangle\n#| solution: true\nx &lt;- seq(-5, 5, length = 100)                                 # &lt;1&gt;\ny &lt;- dnorm(x, mean = ${mean}, sd = ${sd})                     # &lt;2&gt;\nplot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))                # &lt;3&gt;\n```\n1. Generate values for the x axis.\n2. Generate values for the y axis using the normal distribution density function `dnorm()`, with mean ${mean} and standard deviation ${sd}.\n3. Plot the values as a line (`type = \"l\"`) and with thicker width (`lwd = 2`).\n:::\n\n\n\nThe Normal Distribution\nThe normal distribution has 2 parameters, the mean \\(\\mu\\) and the standard deviation \\(\\sigma\\). For a normal distribution with mean \\(\\mu =\\)  and \\(\\sigma =\\) , here is a plot of the probability density:\n\nimport {Tangle} from \"@mbostock/tangle\"\n\n// Setup Tangle reactive inputs\nviewof mean = Inputs.input(0);\nviewof sd = Inputs.input(1);\nmeanTgl = Inputs.bind(Tangle({min: -5, max: 5, minWidth: \"1em\", step: 0.1}), viewof mean);\nsdTgl = Inputs.bind(Tangle({min: 0, minWidth: \"1em\", step: 0.01}), viewof sd);\n\n// draw plot in R\ndraw_plot(mean, sd)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecreate the plot above in base R graphics.\n\n\n\n\n\n\n\n\n\nSolution:\n\n\nx &lt;- seq(-5, 5, length = 100)                                 # &lt;1&gt;\ny &lt;- dnorm(x, mean = ${mean}, sd = ${sd})                     # &lt;2&gt;\nplot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))                # &lt;3&gt;\n1x &lt;- seq(-5, 5, length = 100)\n2y &lt;- dnorm(x, mean = ${mean}, sd = ${sd})\n3plot(x, y, type = \"l\", lwd = 2, ylim = c(0,1))\n\n\n\n1\n\nGenerate values for the x axis.\n\n2\n\nGenerate values for the y axis using the normal distribution density function dnorm(), with mean  and standard deviation .\n\n3\n\nPlot the values as a line (type = \"l\") and with thicker width (lwd = 2)."
  }
]